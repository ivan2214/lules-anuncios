// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  address    String
  city       String
  postalCode String

  plan   Plan?   @relation(fields: [planId], references: [id])
  planId String?

  Offers Offer[]
  Chat   Chat[]

  @@index([planId])
}

// Agregar modelo para usuarios y sus interacciones con ofertas
model User {
  id                 String                 @id @default(cuid())
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  name               String
  email              String                 @unique
  // Otros campos del usuario como nombre, edad, etc.
  preferences        String[] // Almacena las preferencias del usuario
  favoriteCategories Category[] // Almacena las categorías favoritas del usuario
  interactions       UserOfferInteraction[]
}

model UserOfferInteraction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String
  // Otros campos como "liked", "viewed", etc.

  @@index([offerId])
  @@index([userId])
}

model Offer {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  price       Float?

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  categories   Category[]             @relation("OfferToCategory")
  images       Image[]
  Chat         Chat[]
  Plan         Plan?                  @relation(fields: [planId], references: [id])
  planId       String?
  interactions UserOfferInteraction[]

  @@index([storeId])
  @@index([planId])
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String

  Offer   Offer?  @relation(fields: [OfferId], references: [id], onDelete: Cascade)
  OfferId String?

  @@index([OfferId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  Offers Offer[] @relation("OfferToCategory")
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
}

model Plan {
  id                   String      @id @default(cuid())
  name                 String
  description          String
  price                Float
  offersLimit          OffersLimit // Enum para definir los límites de ofertas
  offerPublishQuantity Int         @default(20) // Cantidad de ofertas que pueden ser publicadas
  isFree               Boolean     @default(true) // Indicates if this is a freetier plan

  stores Store[]
  Offer  Offer[]
}

enum OffersLimit {
  FREETIER_20
  BASIC_50
  PRO_100
  ENTERPRISE_UNLIMITED
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  Offer   Offer? @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String

  messages Message[]

  @@index([offerId])
  @@index([storeId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String

  sender MessageSender @default(USER)

  @@index([chatId])
}

enum MessageSender {
  USER
  STORE
}
