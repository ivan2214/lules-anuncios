// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id               String      @id @default(cuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  name             String
  address          String
  city             String
  postalCode       String
  email            String      @unique
  phone            String?
  image            String?
  emailVerified    DateTime?
  hashPassword     String
  verified         Boolean     @default(false)
  status           StoreStatus // Estado de la tienda: activa, inactiva, pendiente de aprobación, etc.
  verificationDate DateTime? // Fecha de verificación de la tienda
  website          String? // Sitio web de la tienda
  facebook         String? // Enlace al perfil de Facebook de la tienda
  twitter          String? // Enlace al perfil de Twitter de la tienda
  instagram        String? // Enlace al perfil de Instagram de la tienda
  linkedin         String? // Enlace al perfil de LinkedIn de la tienda
  // Puedes agregar más campos según las redes sociales relevantes para tu plataforma

  plan   Plan?   @relation(fields: [planId], references: [id])
  planId String?

  messages Message[]
  offers   Offer[]
  chats    Chat[]
  admin    Admin?    @relation(fields: [adminId], references: [id])
  adminId  String?

  @@index([adminId])
  @@index([planId])
}

model Admin {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  email     String    @unique
  password  String
  role      AdminRole @default(SUPER_ADMIN)

  // Relación opcional con las tiendas que este administrador ha verificado
  verifiedStores Store[]

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN // Tiene permisos superiores, como la capacidad de verificar tiendas
  ADMIN // Tiene permisos estándar
  // Puedes agregar más roles según sea necesario
}

model User {
  id                 String                 @id @default(cuid())
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  email              String                 @unique
  name               String?
  emailVerified      DateTime?
  hashPassword       String?
  image              String?
  preferences        String[] // Almacena las preferencias del usuario
  // Agregado: Campo para las categorías favoritas del usuario
  favoriteCategories Category[]             @relation("UserFavoriteCategories")
  interactions       UserOfferInteraction[]
  accounts           Account[]
  role               UserRole               @default(ANNONYMOUS)
  messages           Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserOfferInteraction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String
  // Otros campos como "liked", "viewed", etc.

  @@index([offerId])
  @@index([userId])
  @@map("userofferinteractions")
}

model Offer {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  price       Float?

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  categories Category[] @relation("OfferToCategory")
  images     Image[]
  chat       Chat       @relation(fields: [chatId], references: [id]) // Cambiamos chats por chat y hacemos que sea opcional
  chatId     String

  plan   Plan?   @relation(fields: [planId], references: [id])
  planId String?

  interactions UserOfferInteraction[]

  @@index([storeId])
  @@index([planId])
  @@index([chatId])
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String

  offer   Offer?  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String?

  @@index([offerId])
  @@map("images")
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  // Agregado: Relación con usuarios para las categorías favoritas
  users  User[]  @relation("UserFavoriteCategories")
  offers Offer[] @relation("OfferToCategory")

  @@map("categories")
}

model Plan {
  id                   String         @id @default(cuid())
  name                 String
  description          String
  price                Float
  offersLimit          OffersLimit // Enum para definir los límites de ofertas
  offerPublishQuantity Int            @default(20) // Cantidad de ofertas que pueden ser publicadas
  isFree               Boolean        @default(true) // Indica si este es un plan gratuito
  billingEnabled       Boolean?        @default(false) // Indica si la facturación está habilitada para este plan
  billingCycle         BillingCycle? // Ciclo de facturación (mensual, anual, etc.)
  nextBillingDate      DateTime? // Fecha de la próxima facturación
  paymentStatus        PaymentStatus? // Estado del pago (pendiente, pagado, vencido, etc.)
  lastPaymentDate      DateTime? // Fecha del último pago
  totalAmountPaid      Float? // Monto total pagado hasta la fecha

  features Feature[]
  stores   Store[]
  offers   Offer[]

  @@map("plans")
}

model Feature {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  priority    Int?
  Plan        Plan?     @relation(fields: [planId], references: [id])
  planId      String?

  @@index([planId])
  @@map("features")
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  messages Message[]
  Offer    Offer[]

  @@index([storeId], name: "store_index") // Añadimos un nombre personalizado al índice
  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String

  sender MessageSender @default(USER)
  user   User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId String?

  @@index([userId])
  @@index([storeId])
  @@index([chatId], name: "chat_index") // Añadimos un nombre personalizado al índice
  @@map("messages")
}

enum UserRole {
  USER
  ANNONYMOUS
}

enum MessageSender {
  USER
  STORE
}

enum OffersLimit {
  FREETIER_20
  BASIC_50
  PRO_100
  ENTERPRISE_UNLIMITED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  // Otros estados de pago según sea necesario
}

enum BillingCycle {
  MONTHLY
  ANNUAL
  // Otros ciclos de facturación según sea necesario
}

enum StoreStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  // Otros estados según sea necesario
}
